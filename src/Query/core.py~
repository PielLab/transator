from Bio import SeqIO
from Bio.Alphabet import IUPAC
from hmmer.core import HMMERSuite, HMMERParse, HMMERModelBasedCutoffStore
import Query
import re
from Bio.SeqFeature import SeqFeature, FeatureLocation

class QueryRunner(object):
    
    
    def __init__(self, fastaQuery, HMMModel, outPutPath, HMMBinaryPath):
        self.fastaQuery = fastaQuery
        self.HMMModel = HMMModel
        self.outPutPath = outPutPath
        self.HMMBinaryPath = HMMBinaryPath
        self.skipClade = list()
        self.useCutOff = False
            
    def __setAlphabet(self,seq):
        if re.match("[ATCG]+",str(seq)):
            seq.alphabet = IUPAC.unambiguous_dna
        else:
            seq.alphabet = IUPAC.protein
    
    def __generalLocationContainsCladeLoc(self,generalLoc,cladeLocation):
        if generalLoc.start <= cladeLocation.start and cladeLocation.end <= generalLoc.end:
            return True
        else:
            return False
                
    def setCladesToSkip(self,cladesToSkip):
        self.skipClade=cladesToSkip
        
    def useModelCutOff(self):
        self.useCutOff=True
        self.hmmerCutOffStore = HMMERModelBasedCutoffStore(self.HMMModel+".modelcutoffs")
    
    def runQuery(self):
        listOfAASeqs = list()
        for seq_record in SeqIO.parse(self.fastaQuery,"fasta"):
            self.__setAlphabet(seq_record.seq)
            # print "Processing "+seq_record.id+" alphabet "+str(seq_record.seq.alphabet)
            # if the sequence is a nucleotide, get 6 reading frames into AA.
            if seq_record.seq.alphabet == IUPAC.unambiguous_dna:
            #if seq_record.seq.alphabet != IUPAC.ExtendedIUPACProtein:
                try:
                    for i in range(3):
                        seqAA = seq_record[i::3].translate(table=11)
                        seqAA.id = seq_record.id+"_T%" % i
                        listOfAASeqs.append(seqAA)
                        seqAA = seq_record.reverse_complement()[i::3].translate(table=11)
                        seqAA.id = seq_record.id+"_RT%" % i
                        listOfAASeqs.append(seqAA)
                        # by default we use the bacterial traslation table
                except AttributeError:
                    print "Skipping "+seq_record.id+" due to wrongly detected alphabet "+str(seq_record.seq.alphabet)
            else:
                listOfAASeqs.append(seq_record)
                 
        hmmerExec = HMMERSuite(path=self.HMMBinaryPath)
        self.listOfSeqRecords = list()
            
        for seqAA in listOfAASeqs:
            print "Processing "+seqAA.id
            indfastaPath=self.outPutPath+"Query_"+seqAA.id+".faa"
            SeqIO.write(sequences=seqAA, handle=indfastaPath, format="fasta")
            scanOutputPath=self.outPutPath+seqAA.id+"_hmmerRes.txt"
            hmmerExec.runScan(query=indfastaPath, output=scanOutputPath, model=self.HMMModel)
            hmmResFH = open(scanOutputPath,'r')
            hmmParse = HMMERParse(hmmerScanFileHandle=hmmResFH, maxBestModels=10)
            # First model hit needs to be of the general PKS, get those coordinates
            model = hmmParse.goToNextModelAlignments()
            if not (model == "AllTransKS"):
                print "First hit is not the PKS General signal, skipping"
                continue
            
            listOfGeneralModelDomains = list()
            # A list of SeqFeatureContainer
            domainHit = hmmParse.nextAlignmentResult()
            print "Processing domains for AllTransKS"
            while domainHit != None:
                domain_loc = FeatureLocation(domainHit.getQueryStart(),domainHit.getQueryStop())
                qual = {"evalue" : domainHit.getCEvalue(), 
                            "score" : domainHit.getScore(),
                            "name" : model}
                domain_feat = SeqFeature(domain_loc,type="domain",strand=1,id=model)
                # we could put scores and evalues in qualifiers field
                listOfGeneralModelDomains.append(SeqFeatureContainer(domain_feat))
                # seqAA.features.append(domain_feat)
                domainHit = hmmParse.nextAlignmentResult()
                
            print "Processing domains for Clades"    
            # For each subsequent model (the clades), if they fit within detected PKS general
            # coordinates, store the clade specific hit as a SeqFeature of the SeqRecord
            model = hmmParse.goToNextModelAlignments()
            while model != None:
                domainHit = hmmParse.nextAlignmentResult()
                if self.skipClade.count(model)>0:
                    print "Skipping model "+model
                    model = hmmParse.goToNextModelAlignments()
                    continue
                print "Processing model "+model
                while domainHit != None:
                    domain_loc = FeatureLocation(domainHit.getQueryStart(),domainHit.getQueryStop())
                    found=False
                    pickedSeqFeatCont = None
                    for seqFeatCont in listOfGeneralModelDomains:
                        if seqFeatCont.generalLocationContainsCladeLoc(domain_loc):
                            found=True
                            pickedSeqFeatCont = seqFeatCont
                            break
                    if not found:
                        domainHit = hmmParse.nextAlignmentResult()
                        break
                    if self.useCutOff & self.hmmerCutOffStore.hasEvalueCutoff(model):
                        if self.hmmerCutOffStore.getCutEvalueCutOff(model) < float(domainHit.getCEvalue()):
                            print "Skipping model "+model+" due to evalue cutoff."
                            domainHit = hmmParse.nextAlignmentResult()
                            break
                    qual = {"evalue" : domainHit.getCEvalue(), 
                            "score" : domainHit.getScore(),
                            "name" : model}
                    domain_feat = SeqFeature(domain_loc, type="domain", 
                                             strand=1, id=model, qualifiers=qual)
                    # seqAA.features.append(domain_feat)
                    pickedSeqFeatCont.addCladeSeqFeature(domain_feat)
                    domainHit = hmmParse.nextAlignmentResult()
                    
                model = hmmParse.goToNextModelAlignments()
            
            for seqFeatCont in listOfGeneralModelDomains:
                bestClade = seqFeatCont.getBestCladeSeqFeature()
                if bestClade != None:
                    seqAA.features.append(bestClade)
            # Finally, add the seqRecord to the list of SeqRecords to be returned.
            # This can be written at the outside to GBK
            self.listOfSeqRecords.append(seqAA)
    
    def getSeqsWithResults(self):
        return self.listOfSeqRecords
    
    
class SeqFeatureContainer(object):
    
    def __init__(self,generalSeqFeature):
        self.generalSeqFeature = generalSeqFeature
        self.listOfSubFeatures = list()
        
    def generalLocationContainsCladeLoc(self,cladeLocation):
        generalLoc = self.generalSeqFeature.location
        if generalLoc.start <= cladeLocation.start and cladeLocation.end <= generalLoc.end:
            return True
        else:
            return False
        
    def addCladeSeqFeature(self,cladeSeqFeature):
        self.listOfSubFeatures.append(cladeSeqFeature)
        
    def getBestCladeSeqFeature(self):
        if len(self.listOfSubFeatures) == 0:
            return None
        sortedList = sorted(self.listOfSubFeatures,reverse=True,key=lambda feature: feature.qualifiers["score"])
        bestHit = sortedList[0]
        quals = bestHit.qualifiers
        if len(sortedList) > 1:
            nextEvalue = sortedList[1].qualifiers["evalue"]
            nextScore = sortedList[1].qualifiers["score"]
            nextClade = sortedList[1].qualifiers["name"]
            quals["note"] = "Next best result was "+nextClade+" Evalue: %0.E Score: %d " % (nextEvalue,nextScore)
        bestHit.qualifiers = quals
        return bestHit
        
            
            
            
    
    
    


